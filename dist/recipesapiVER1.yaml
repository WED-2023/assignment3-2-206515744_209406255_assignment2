openapi: 3.0.3
info:
  version: 1.0.1
  title: Grandma Recipe API
  description: "A comprehensive API for managing family recipes, user preferences, and recipe discovery. Organize your culinary heritage with features for personal recipe collections, family recipe sharing, and public recipe exploration."
  contact:
    name: Ilay Cohen and Victor Gavrilenko
    email: support@grandmarecipes.com
servers:
  - url: "/"
    description: Local development server

tags:
  - name: Auth
    description: "User authentication and session management"
  - name: User Profile
    description: "User account information and profile management"
  - name: User Interactions
    description: "User recipe interactions - viewing history and liked recipes"
  - name: User Favorites
    description: "User's favorite recipe management"
  - name: User Recipes
    description: "User's personal recipe collection management"
  - name: Family Recipes
    description: "Family recipe sharing and management"
  - name: Public Recipes
    description: "Public recipe browsing, search, and discovery"
  - name: Countries
    description: "Country data for user registration"

paths:
  # ========================================
  # AUTHENTICATION SECTION
  # ========================================
  
  /login:
    post:
      tags:
        - Auth
      summary: "User Login"
      description: "Authenticate user with username and password to create a session"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: "john_doe"
                password:
                  type: string
                  format: password
                  example: "password123"
      responses:
        '200':
          description: "Login successful"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login succeeded"
                  success:
                    type: boolean
                    example: true
        '401':
          description: "Invalid credentials"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Username or Password incorrect"
                  success:
                    type: boolean
                    example: false

  /register:
    post:
      tags:
        - Auth
      summary: "User Registration"
      description: "Register a new user account"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - firstname
                - lastname
                - country
                - password
                - confirmedPassword
                - email
              properties:
                username:
                  type: string
                  minLength: 3
                  maxLength: 8
                  pattern: '^[a-zA-Z]+$'
                  example: "johndoe"
                firstname:
                  type: string
                  example: "John"
                lastname:
                  type: string
                  example: "Doe"
                country:
                  type: string
                  example: "United States"
                password:
                  type: string
                  minLength: 5
                  maxLength: 10
                  pattern: '^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]+$'
                  example: "Pass123!"
                confirmedPassword:
                  type: string
                  example: "Pass123!"
                email:
                  type: string
                  format: email
                  example: "john@example.com"
      responses:
        '201':
          description: "User registered successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User created"
                  success:
                    type: boolean
                    example: true
        '409':
          description: "Username already exists"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Username taken"
                  success:
                    type: boolean
                    example: false

  /logout:
    post:
      tags:
        - Auth
      summary: "User Logout"
      description: "Logout user and destroy session"
      responses:
        '200':
          description: "Logout successful"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout succeeded"
                  success:
                    type: boolean
                    example: true

  # ========================================
  # USER PROFILE SECTION
  # ========================================
  
  /user_information:
    get:
      tags:
        - User Profile
      summary: "Get User Information"
      description: "Retrieve current user's profile information"
      responses:
        '200':
          description: "User information retrieved successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User information retrieved successfully"
                  data:
                    type: object
                    properties:
                      username:
                        type: string
                        example: "john_doe"
                      firstname:
                        type: string
                        example: "John"
                      lastname:
                        type: string
                        example: "Doe"
                      country:
                        type: string
                        example: "United States"
                      email:
                        type: string
                        example: "john@example.com"
                      profilePic:
                        type: string
                        nullable: true
                        example: "https://example.com/profile.jpg"
        '401':
          description: "User not authenticated"

  # ========================================
  # USER INTERACTIONS SECTION
  # ========================================
  
  /users/last-view:
    get:
      tags:
        - User Interactions
      summary: "Get Last Viewed Recipes"
      description: "Retrieve user's recently viewed recipes"
      parameters:
        - name: number
          in: query
          description: "Number of recipes to return (default: 3)"
          required: false
          schema:
            type: integer
            default: 3
            minimum: 1
            maximum: 15
            example: 5
      responses:
        '200':
          description: "Last viewed recipes retrieved successfully"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        '401':
          description: "User not authenticated"

    post:
      tags:
        - User Interactions
      summary: "Mark Recipe as Viewed"
      description: "Add a recipe to user's viewing history"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - recipe_id
              properties:
                recipe_id:
                  type: integer
                  example: 123
      responses:
        '201':
          description: "Recipe marked as viewed"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Recipe marked as viewed"
                  success:
                    type: boolean
                    example: true
        '401':
          description: "User not authenticated"

  /users/liked:
    get:
      tags:
        - User Interactions
      summary: "Get Liked Recipes"
      description: "Retrieve all recipes liked by the user"
      responses:
        '200':
          description: "Liked recipes retrieved successfully"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        '401':
          description: "User not authenticated"

    post:
      tags:
        - User Interactions
      summary: "Like Recipe"
      description: "Add a recipe to user's liked recipes"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - recipe_id
              properties:
                recipe_id:
                  type: integer
                  example: 123
      responses:
        '201':
          description: "Recipe liked successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Recipe liked successfully"
                  success:
                    type: boolean
                    example: true
        '401':
          description: "User not authenticated"

    delete:
      tags:
        - User Interactions
      summary: "Unlike Recipe"
      description: "Remove a recipe from user's liked recipes"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - recipe_id
              properties:
                recipe_id:
                  type: integer
                  example: 123
      responses:
        '200':
          description: "Recipe unliked successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Recipe unliked successfully"
                  success:
                    type: boolean
                    example: true
        '401':
          description: "User not authenticated"

  # ========================================
  # USER FAVORITES SECTION
  # ========================================
  
  /users/favorites:
    get:
      tags:
        - User Favorites
      summary: "Get Favorite Recipes"
      description: "Retrieve all recipes marked as favorites by the user"
      responses:
        '200':
          description: "Favorite recipes retrieved successfully"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        '401':
          description: "User not authenticated"

    post:
      tags:
        - User Favorites
      summary: "Add Recipe to Favorites"
      description: "Mark a recipe as favorite"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - recipe_id
              properties:
                recipe_id:
                  type: integer
                  example: 123
      responses:
        '201':
          description: "Recipe added to favorites"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Recipe added to favorites successfully"
                  success:
                    type: boolean
                    example: true
        '401':
          description: "User not authenticated"

    delete:
      tags:
        - User Favorites
      summary: "Remove Recipe from Favorites"
      description: "Remove a recipe from user's favorites"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - recipe_id
              properties:
                recipe_id:
                  type: integer
                  example: 123
      responses:
        '200':
          description: "Recipe removed from favorites"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Recipe removed from favorites successfully"
                  success:
                    type: boolean
                    example: true
        '401':
          description: "User not authenticated"

  # ========================================
  # USER RECIPES SECTION
  # ========================================
  
  /users/my-recipes:
    get:
      tags:
        - User Recipes
      summary: "Get User's Personal Recipes"
      description: "Retrieve all recipes created by the user"
      responses:
        '200':
          description: "User recipes retrieved successfully"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserRecipe'
        '401':
          description: "User not authenticated"

    post:
      tags:
        - User Recipes
      summary: "Create New Personal Recipe"
      description: "Create a new recipe in user's personal collection"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRecipeRequest'
      responses:
        '201':
          description: "Recipe created successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Recipe created successfully"
                  success:
                    type: boolean
                    example: true
                  recipe_id:
                    type: integer
                    example: 456
        '401':
          description: "User not authenticated"

    delete:
      tags:
        - User Recipes
      summary: "Delete Personal Recipe"
      description: "Delete a recipe from user's personal collection"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - recipe_id
              properties:
                recipe_id:
                  type: integer
                  example: 456
      responses:
        '200':
          description: "Recipe deleted successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Recipe deleted successfully"
                  success:
                    type: boolean
                    example: true
        '401':
          description: "User not authenticated"

  /users/my-recipes/{recipe_id}:
    get:
      tags:
        - User Recipes
      summary: "Get Personal Recipe Details"
      description: "Get detailed information about a specific personal recipe"
      parameters:
        - name: recipe_id
          in: path
          required: true
          description: "ID of the recipe to retrieve"
          schema:
            type: integer
            example: 456
        - name: full
          in: query
          required: false
          description: "Get full recipe details including instructions and equipment"
          schema:
            type: string
            enum: ['true', 'false']
            default: 'false'
            example: 'true'
      responses:
        '200':
          description: "Recipe details retrieved successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRecipe'
        '401':
          description: "User not authenticated"
        '404':
          description: "Recipe not found"

  /users/my-recipes/{recipe_id}/preparation:
    get:
      tags:
        - User Recipes
      summary: "Get Personal Recipe Preparation Steps"
      description: "Navigate through recipe preparation with step-by-step instructions"
      parameters:
        - name: recipe_id
          in: path
          required: true
          description: "ID of the recipe"
          schema:
            type: integer
            example: 456
        - name: step
          in: query
          required: false
          description: "Current step number (default: 1)"
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 3
      responses:
        '200':
          description: "Preparation steps retrieved successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreparationSteps'
        '401':
          description: "User not authenticated"
        '404':
          description: "Recipe not found"

  # ========================================
  # FAMILY RECIPES SECTION
  # ========================================
  
  /users/family-recipes:
    get:
      tags:
        - Family Recipes
      summary: "Get Family Recipes"
      description: "Retrieve all family recipes shared with the user"
      responses:
        '200':
          description: "Family recipes retrieved successfully"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FamilyRecipe'
        '401':
          description: "User not authenticated"

    post:
      tags:
        - Family Recipes
      summary: "Create New Family Recipe"
      description: "Create a new recipe in the family collection"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFamilyRecipeRequest'
      responses:
        '201':
          description: "Family recipe created successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Family recipe created successfully"
                  success:
                    type: boolean
                    example: true
                  recipe_id:
                    type: integer
                    example: 789
        '401':
          description: "User not authenticated"

    delete:
      tags:
        - Family Recipes
      summary: "Delete Family Recipe"
      description: "Delete a family recipe (only if user is the creator)"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - recipe_id
              properties:
                recipe_id:
                  type: integer
                  example: 789
      responses:
        '200':
          description: "Family recipe deleted successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Family recipe deleted successfully"
                  success:
                    type: boolean
                    example: true
        '401':
          description: "User not authenticated"
        '403':
          description: "Not authorized to delete this recipe"

  /users/family-recipes/{recipe_id}:
    get:
      tags:
        - Family Recipes
      summary: "Get Family Recipe Details"
      description: "Get detailed information about a specific family recipe"
      parameters:
        - name: recipe_id
          in: path
          required: true
          description: "ID of the family recipe to retrieve"
          schema:
            type: integer
            example: 789
        - name: full
          in: query
          required: false
          description: "Get full recipe details including instructions and equipment"
          schema:
            type: string
            enum: ['true', 'false']
            default: 'false'
            example: 'true'
      responses:
        '200':
          description: "Family recipe details retrieved successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FamilyRecipe'
        '401':
          description: "User not authenticated"
        '404':
          description: "Family recipe not found"

  /users/family-recipes/{recipe_id}/preparation:
    get:
      tags:
        - Family Recipes
      summary: "Get Family Recipe Preparation Steps"
      description: "Navigate through family recipe preparation with step-by-step instructions"
      parameters:
        - name: recipe_id
          in: path
          required: true
          description: "ID of the family recipe"
          schema:
            type: integer
            example: 789
        - name: step
          in: query
          required: false
          description: "Current step number (default: 1)"
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 2
      responses:
        '200':
          description: "Family recipe preparation steps retrieved successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreparationSteps'
        '401':
          description: "User not authenticated"
        '404':
          description: "Family recipe not found"

  # ========================================
  # PUBLIC RECIPES SECTION
  # ========================================
  
  /recipes/random:
    get:
      tags:
        - Public Recipes
      summary: "Get Random Recipes"
      description: "Retrieve random recipes from Spoonacular API with optional cache bypass"
      parameters:
        - name: number
          in: query
          description: "Number of random recipes to return (default: 3)"
          required: false
          schema:
            type: integer
            default: 3
            minimum: 1
            maximum: 10
            example: 5
        - name: fresh
          in: query
          description: "Bypass cache and get fresh random recipes from API"
          required: false
          schema:
            type: string
            enum: ['true', 'false']
            default: 'false'
            example: 'true'
      responses:
        '200':
          description: "Random recipes retrieved successfully"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        '500':
          description: "Failed to fetch random recipes"

  /recipes/search:
    get:
      tags:
        - Public Recipes
      summary: "Search Recipes"
      description: "Search for recipes using various filters and criteria"
      parameters:
        - name: query
          in: query
          required: true
          description: "Search query for recipe names or ingredients"
          schema:
            type: string
            example: "chicken pasta"
        - name: number
          in: query
          required: false
          description: "Number of results to return"
          schema:
            type: integer
            enum: [5, 10, 15]
            default: 5
            example: 10
        - name: cuisines
          in: query
          required: false
          description: "Filter by cuisine type"
          schema:
            type: string
            example: "Italian"
        - name: diet
          in: query
          required: false
          description: "Filter by dietary restrictions"
          schema:
            type: string
            example: "vegetarian"
        - name: intolerances
          in: query
          required: false
          description: "Filter by food intolerances"
          schema:
            type: string
            example: "gluten"
      responses:
        '200':
          description: "Search results retrieved successfully"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        '404':
          description: "No recipes found matching the criteria"

  /recipes/{recipe_id}:
    get:
      tags:
        - Public Recipes
      summary: "Get Recipe Details"
      description: "Get detailed information about a specific public recipe"
      parameters:
        - name: recipe_id
          in: path
          required: true
          description: "ID of the recipe to retrieve"
          schema:
            type: integer
            example: 123
        - name: full
          in: query
          required: false
          description: "Get full recipe details including instructions and equipment"
          schema:
            type: string
            enum: ['true', 'false']
            default: 'false'
            example: 'true'
      responses:
        '200':
          description: "Recipe details retrieved successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        '404':
          description: "Recipe not found"

  /recipes/{recipe_id}/preparation:
    get:
      tags:
        - Public Recipes
      summary: "Get Recipe Preparation Steps"
      description: "Navigate through recipe preparation with step-by-step instructions"
      parameters:
        - name: recipe_id
          in: path
          required: true
          description: "ID of the recipe"
          schema:
            type: integer
            example: 123
        - name: step
          in: query
          required: false
          description: "Current step number (default: 1)"
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 3
      responses:
        '200':
          description: "Preparation steps retrieved successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreparationSteps'
        '404':
          description: "Recipe not found"

  # ========================================
  # COUNTRIES SECTION
  # ========================================
  
  /countries:
    get:
      tags:
        - Countries
      summary: "Get Countries List"
      description: "Retrieve list of countries for user registration"
      responses:
        '200':
          description: "Countries list retrieved successfully"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: "United States"

components:
  schemas:
    Recipe:
      type: object
      properties:
        id:
          type: integer
          example: 123
        title:
          type: string
          example: "Chicken Alfredo Pasta"
        image:
          type: string
          example: "https://example.com/recipe-image.jpg"
        readyInMinutes:
          type: integer
          example: 30
        aggregateLikes:
          type: integer
          example: 85
        vegan:
          type: boolean
          example: false
        vegetarian:
          type: boolean
          example: false
        glutenFree:
          type: boolean
          example: false
        summary:
          type: string
          example: "A delicious creamy pasta dish with chicken and alfredo sauce"
        extendedIngredients:
          type: array
          items:
            $ref: '#/components/schemas/Ingredient'
        analyzedInstructions:
          type: array
          items:
            $ref: '#/components/schemas/Instruction'
        spoonacularScore:
          type: number
          format: float
          example: 85.5
        liked:
          type: boolean
          example: false
        favorite:
          type: boolean
          example: true
        viewed:
          type: boolean
          example: true

    UserRecipe:
      type: object
      properties:
        id:
          type: integer
          example: 456
        title:
          type: string
          example: "Mom's Special Lasagna"
        image:
          type: string
          example: "https://example.com/my-recipe-image.jpg"
        readyInMinutes:
          type: integer
          example: 120
        aggregateLikes:
          type: integer
          example: 0
        vegan:
          type: boolean
          example: false
        vegetarian:
          type: boolean
          example: true
        glutenFree:
          type: boolean
          example: false
        summary:
          type: string
          example: "A family recipe passed down through generations"
        ingredients:
          type: array
          items:
            type: string
            example: "2 cups ricotta cheese"
        instructions:
          type: array
          items:
            type: string
            example: "Preheat oven to 375°F"

    FamilyRecipe:
      type: object
      properties:
        id:
          type: integer
          example: 789
        title:
          type: string
          example: "Grandma's Apple Pie"
        readyInMinutes:
          type: integer
          example: 90
        familyMember:
          type: string
          example: "Grandma Rose"
        occasion:
          type: string
          example: "Thanksgiving"
        ingredients:
          type: array
          items:
            type: string
            example: "6 large apples, peeled and sliced"
        instructions:
          type: array
          items:
            type: string
            example: "Roll out pie crust and place in pie dish"

    Ingredient:
      type: object
      properties:
        id:
          type: integer
          example: 11124
        name:
          type: string
          example: "carrots"
        amount:
          type: number
          example: 2
        unit:
          type: string
          example: "large"
        original:
          type: string
          example: "2 large carrots, diced"

    Instruction:
      type: object
      properties:
        name:
          type: string
          example: "Preparation"
        steps:
          type: array
          items:
            $ref: '#/components/schemas/Step'

    Step:
      type: object
      properties:
        number:
          type: integer
          example: 1
        step:
          type: string
          example: "Heat oil in a large skillet over medium heat"
        ingredients:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 4582
              name:
                type: string
                example: "cooking oil"
        equipment:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 404645
              name:
                type: string
                example: "frying pan"

    CreateRecipeRequest:
      type: object
      required:
        - title
        - readyInMinutes
        - image
        - vegan
        - vegetarian
        - glutenFree
        - summary
        - ingredients
        - instructions
      properties:
        title:
          type: string
          example: "My Special Pasta"
        readyInMinutes:
          type: integer
          example: 45
        image:
          type: string
          example: "https://example.com/my-pasta.jpg"
        vegan:
          type: boolean
          example: false
        vegetarian:
          type: boolean
          example: true
        glutenFree:
          type: boolean
          example: false
        summary:
          type: string
          example: "A delicious homemade pasta recipe"
        ingredients:
          type: array
          items:
            type: string
            example: "500g pasta"
        instructions:
          type: array
          items:
            type: string
            example: "Boil water in a large pot"

    CreateFamilyRecipeRequest:
      type: object
      required:
        - title
        - readyInMinutes
        - familyMember
        - occasion
        - ingredients
        - instructions
      properties:
        title:
          type: string
          example: "Uncle Bob's BBQ Ribs"
        readyInMinutes:
          type: integer
          example: 180
        familyMember:
          type: string
          example: "Uncle Bob"
        occasion:
          type: string
          example: "Summer BBQ"
        ingredients:
          type: array
          items:
            type: string
            example: "2 racks of baby back ribs"
        instructions:
          type: array
          items:
            type: string
            example: "Season ribs with dry rub and let sit for 2 hours"

    PreparationSteps:
      type: object
      properties:
        currentStep:
          type: integer
          example: 2
        totalSteps:
          type: integer
          example: 8
        step:
          type: object
          properties:
            number:
              type: integer
              example: 2
            instruction:
              type: string
              example: "Add chopped onions and cook until translucent"
            ingredients:
              type: array
              items:
                type: string
                example: "1 medium onion, chopped"
            equipment:
              type: array
              items:
                type: string
                example: "cutting board"
        navigation:
          type: object
          properties:
            hasPrevious:
              type: boolean
              example: true
            hasNext:
              type: boolean
              example: true
            previousStep:
              type: integer
              example: 1
            nextStep:
              type: integer
              example: 3
