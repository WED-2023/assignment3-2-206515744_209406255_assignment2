openapi: 3.0.3
info:
  version: 1.0.1
  title: Grandma Recipe API
  description: An API that allows users to register to the recpies website, get exisiting recpies information, add their own recipes and get users data.
  contact:
  name: Ilay Cohen and Victor Gavrilenko
servers:
  - url: "/"
    description: SwaggerHub API Auto Mocking
tags:
  - name: Auth
    description: User registration and login
  - name: Recipes
    description: Public and userâ€‘generated recipes
  - name: Users
    description: "Personal resources (favorites, history, own recipes)"
  - name: Countries
    description: "Countries list for user registration"
paths:
  /login:
    post:
      tags:
        - Auth
      summary: user try to login
      description: check if the user authntication details are correct.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginUser"
        description: User details to sign in
      responses:
        202:
          description: users details are valid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        400:
          description: already logged in.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        401:
          description: username or password is incorrect
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"

  /register:
    post:
      tags:
        - Auth
      summary: user sign up
      description: user sends all the required details to sign up for the website.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterUser"
      responses:
        201:
          description: user signed up successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        409:
          description: username is taken.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"

  /logout:
    post:
      tags:
        - Auth
      summary: logout user from the system.
      description: user logged out from the website and his cookie been deleted.
      responses:
        200:
          description: user logged out successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        401:
          description: user wasn't logged in.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /user_information:
    get:
      tags:
        - Users
      summary: Get current logged-in user information
      description: Retrieve firstname, lastname, country, email, and profile picture of the currently logged-in user
      responses:
        200:
          description: User information retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    $ref: "#/components/schemas/UserDetails"
        401:
          description: User is not logged in.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /users/last-view:
    get:
      tags:
        - Users
      summary: Get the user last viewed recipes.
      description: Return the last recipe pages that the user watched. You can specify the exact number of last pages you need(default number is 3). If there are fewer pages than the number specified, then return all last viewed existing pages.
      parameters:
        - name: number
          in: query
          required: false
          description: The required number of last viewed pages.
          schema:
            type: integer
            example: 3

      responses:
        200:
          description: return an array of the number specified last viewed pages.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RecipePreview"
        401:
          description: User is not logged in.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"

    post:
      tags:
        - Users
      summary: Add a recipe to the user's last viewed list
      description: Add a recipe to the user's last viewed list, creating the list if it doesn't exist.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - recipe_id
              properties:
                recipe_id:
                  type: integer
                  description: The unique ID of the recipe
      responses:
        201:
          description: Recipe successfully added to the user's last viewed list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"

        400:
          description: Invalid input (e.g., missing recipe_id or invalid userName)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        401:
          description: User is not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: User or recipe not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"

  /recipes/random:
    get:
      tags:
        - Recipes
      summary: Get n numbers of random recipes.
      description: Return n numbers of random recipes(default n=3). minimum value is 1 and maximum value is 10.
      parameters:
        - name: number
          in: query
          required: false
          description: Number of random recipes(default=3).
          schema:
            type: integer
            minimum: 1
            maximum: 10
            example: 3

      responses:
        200:
          description: Returned n recipes successfully.
            If the user is not logged in, then the recipe 'viewed','favorite' attributes will not be included.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RecipePreview"
        400:
          description: n value is not valid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"

  /users/liked:
    get:
      tags:
        - Users
      summary: Get users liked recipes
      description: Return all the liked recipes of the specified user name.
      responses:
        200:
          description: Return user liked recipes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RecipePreview"
        401:
          description: User is not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"

    post:
      tags:
        - Users
      summary: Add a recipe to the user's liked list
      description: Add a recipe to the user's liked list, creating the list if it doesn't exist.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - recipe_id
              properties:
                recipe_id:
                  type: integer
                  description: The unique ID of the recipe
      responses:
        201:
          description: Recipe successfully added to the user's liked list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        400:
          description: recipe id already saved as liked.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"

        401:
          description: User is not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: recipe id don't exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"

    delete:
      tags:
        - Users
      summary: Delete user recipe from the user's liked list
      description: Delete a recipe from the user's liked list. Must specify the recipe id.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - recipe_id
              properties:
                recipe_id:
                  type: integer
                  description: The unique ID of the user recipe

      responses:
        200:
          description: Recipe successfully removed from the user's liked list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"

        400:
          description: Invalid input (e.g., missing recipe_id or invalid userName)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        401:
          description: User is not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: User or recipe not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"


  /users/favorites:
    get:
      tags:
        - Users
      summary: Get users favorites recipes
      description: Return all the favorite recipes of the specified user name.
      responses:
        200:
          description: Return user favorite recipes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RecipePreview"
        401:
          description: User is not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"

    post:
      tags:
        - Users
      summary: Add a recipe to the user's favorites list
      description: Add a recipe to the user's favorites list, creating the list if it doesn't exist.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - recipe_id
              properties:
                recipe_id:
                  type: integer
                  description: The unique ID of the recipe
      responses:
        201:
          description: Recipe successfully added to the user's favorites list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        400:
          description: recipe id already saved as favorite.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"

        401:
          description: User is not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: recipe id don't exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"

    delete:
      tags:
        - Users
      summary: Delete user recipe from the user's favorites list
      description: Delete a recipe from the user's favorites list. Must specify the recipe id.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - recipe_id
              properties:
                recipe_id:
                  type: integer
                  description: The unique ID of the user recipe

      responses:
        200:
          description: Recipe successfully removed from the user's favorites list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"

        400:
          description: Invalid input (e.g., missing recipe_id or invalid userName)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        401:
          description: User is not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: User or recipe not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"

  /users/my-recipes:
    get:
      tags:
        - Users
      summary: Get all the recipes created by the user.
      description: Return all the recipes created by the user for the logged in user.
      responses:
        200:
          description: Successfully return user recipes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RecipePreview"
        401:
          description: User is not logged in.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
    post:
      tags:
        - Users
      summary: Add user recipe to the user's own recipes list
      description: Add a recipe to the user's recipes list, creating the list if it doesn't exist. Must specify the same details like all the full recipes format.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FullRecipe"

      responses:
        201:
          description: Recipe successfully added to the user's favorites list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"

        400:
          description: Invalid input (e.g., missing recipe_id or invalid userName)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        401:
          description: User is not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: User or recipe not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"

    delete:
      tags:
        - Users
      summary: Delete user recipe from the user's own recipes list
      description: Delete a recipe from the user's recipes list. Must specify the own user recipe id.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - recipe_id
              properties:
                recipe_id:
                  type: integer
                  description: The unique ID of the user recipe

      responses:
        200:
          description: Recipe successfully added to the user's favorites list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"

        400:
          description: Invalid input (e.g., missing recipe_id or invalid userName)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        401:
          description: User is not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: User or recipe not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"

  /users/my-recipes/{recipe_id}:
    get:
      tags:
        - Users
      summary: Get full recipe created by the user.
      description: Return  the full recipe created by the user for the logged in user.
      parameters:
        - name: recipe_id
          in: path
          required: true
          description: recipe's Id
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Successfully return user recipes.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/FullRecipe"
                  - $ref: "#/components/schemas/RecipePreview"
        401:
          description: User is not logged in.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: Recipe not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"

  /recipes/{recipe_id}:
    get:
      tags:
        - Recipes
      summary: Get the preview or the full recipe.
      description: Return the full recipe of the specified recipe id if the full param is ture or else return the preview.
      parameters:
        - name: recipe_id
          in: path
          required: true
          description: recipe's Id
          schema:
            type: integer
            example: 5
        - name: full
          in: query
          required: false
          description: True if the user want to get the full recipe or else the preview one.
          schema:
            type: boolean
            example: true
      responses:
        201:
          description: >
            Successfully returned recipe. If the 'full' query parameter is true, 
            the response will match the FullRecipe schema. Otherwise, it will match 
            the RecipePreview schema.If the user is not logged in, then the recipe 'viewed','favorite' attributes will not be included.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/FullRecipe"
                  - $ref: "#/components/schemas/RecipePreview"
        401:
          description: "There is no such user id in the system"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"

  /recipes/{recipe_id}/preparation:
    get:
      tags:
        - Recipes
      summary: Get detailed preparation steps for a recipe
      description: Returns instructions, equipment, and ingredients grouped by step
      parameters:
        - name: recipe_id
          in: path
          required: true
          description: ID of the recipe
          schema:
            type: integer
      responses:
        '200':
          description: Preparation details returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipePreparation'
        '401':
          description: User is not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '404':
          description: Recipe not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'

  /recipes/search:
    get:
      tags:
        - Recipes
      summary: search for recipes.
      description: search for recipes by natural language search query. Returns n search where n can be 5,10 or 15(default n=5). Its possible to expand the search using parameters of Type of cuisines, Diet and intolerance for ingredient.
      parameters:
        - name: query
          in: query
          required: true
          description: a natural language description of the desired recipe.
          schema:
            type: string
            example: pasta with tuna

        - name: number
          in: query
          description: number of search result to return. possible value number = 5,10,15.
          schema:
            type: integer
            enum: [5, 10, 15]
            example: 5

        - name: cuisines
          in: query
          description: The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as 'OR').
          schema:
            type: string
            example: American

        - name: diet
          in: query
          description: The diet(s) for which the recipes must be suitable. You can specify multiple with comma meaning AND connection. You can specify multiple diets separated with a pipe | meaning OR connection.
          schema:
            type: string
            example: gluten free,vegetarian

        - name: intolerances
          in: query
          description: A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered.
          schema:
            type: string
            example: gluten
      responses:
        200:
          description: >
            Successfully returned n numbers of recipes matching the search.If the user is not logged in,
            then the recipe 'viewed','favorite' attributes will not be included.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchResult"
        400:
          description: wrong arguments specification.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: There is no matching result for the search.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /users/family-recipes:
    get:
      tags:
        - Users
      summary: Get all family recipes.
      description: Return all family recipes.
      responses:
        200:
          description: Successfully return family recipes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FamilyRecipe"
        401:
          description: User is not logged in.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"

    post:
      tags:
        - Users
      summary: Add a family recipe
      description: Add a family recipe to the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FamilyRecipe"
      responses:
        201:
          description: Recipe successfully added to the system
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        400:
          description: Invalid input (e.g., missing recipe_id or invalid userName)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        401:
          description: User is not authorized.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: User or recipe not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
    delete:
      tags:
        - Users
      summary: Delete a family recipe
      description: Delete a family recipe from the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - familyrecipe_id
              properties:
                familyrecipe_id:
                  type: integer
                  description: The unique ID of the family recipe
              example:
                familyrecipe_id: 123

      responses:
        200:
          description: Recipe successfully deleted from the system
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessMessage"
        400:
          description: Invalid input (e.g., missing recipe_id or invalid userName)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
        404:
          description: Recipe not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  
  /countries:
    get:
      tags:
        - Countries
      summary: Get list of all countries
      description: Returns an array of country names.
      responses:
        200:
          description: A JSON array of country names.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Countries"
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
components:
  schemas:
    FamilyRecipe:
      description: family recipe
      type: object
      required:
        - familyrecipe_id
        - family_member
        - occasion
        - ingredients
        - instructions
        - image
      properties:
        familyrecipe_id:
          type: integer
          description: family recipe id of the recipe
          exampe: 779
        family_member:
          type: string
          description: family member who created the recipe
          example: Ilay Gavrilenko
        occasion:
          type: string
          description: occasion for which the recipe is suitable
          example: birthday
        ingredients:
          type: array
          items:
            type: string
            example: carrot, tomato, onion, etc.
        instructions:
          type: array
          items:
            type: string
            example: Drain the eggs, return them to the pan and shake the pan to crack the shells all over.
        image:
          type: string
          description: recipe image
          format: URL
          example: https://spoonacular.com/recipeimages/655455-566x370.jpg
    RecipePreview:
      description: Model containing only the recipe preview
      type: object
      required:
        - recipe_id
        - title
        - image
        - readyInMinutes
        - aggregateLikes
        - vegan
        - vegetarian
        - glutenFree
      properties:
        recipe_id:
          type: integer
          description: id of the recipe
          exampe: 779
        title:
          type: string
          description: recipe title name
          example: Baba Ganush
        image:
          type: string
          description: recipe image
          format: URL
          example: https://spoonacular.com/recipeimages/655455-566x370.jpg
        readyInMinutes:
          type: integer
          description: the time in minutes that takes to make the recipe
          example: 20
        aggregateLikes:
          type: integer
          description: amout of like the recipe got
          example: 7
        vegan:
          type: boolean
          description: does the recipe is vegan
          examle: true
        vegetarian:
          type: boolean
          description: does the recipe is vegetarian
          examle: true
        glutenFree:
          type: boolean
          description: does the recipe is vegetrian
          examle: true
        viewed:
          type: boolean
          description: does the recipe was viewed by the user
          examle: true
        favorite:
          type: boolean
          description: does the recipe in the user favorites list.
          examle: true

    LoginUser:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 8
          description: username contains 3 to 8 letters only
          example: IlayGav

        password:
          type: string
          minLength: 5
          maxLength: 10
          format: password
          description: >
            user's passwords contains betweeb 5 to 10 chars,
            contains at least one number and special char
          example: il@1gav

    RegisterUser:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 8
          description: username contains 3 to 8 letters only
          example: IlayGav
        firstname:
          type: string
          description: user's first name
          example: Ilay
        lastname:
          type: string
          description: user's last name
          example: Gavrilenko
        country:
          type: string
          description: user's country
          example: Norway
        password:
          type: string
          minLength: 5
          maxLength: 10
          format: password
          description: >
            user's passwords contains betweeb 5 to 20 chars,
            contains at least one number and special char
          example: il@1gav
        email:
          type: string
          format: email
          description: user's email
          example: ilgavC@gmail.com
        profilePic:
          type: string
          format: uri
          description: Optional URL for user profile picture
          example: https://www.example.com/default-profile.png

    UserDetails:
      type: string
      properties:
        firstname:
          type: string
          description: user's first name
          example: Ilay
        lastname:
          type: string
          description: user's last name
          example: Gavrilenko
    SearchResult:
      allOf:
        - $ref: "#/components/schemas/RecipePreview"
        - type: object
          properties:
            instructions:
              type: array
              items:
                type: string
                example: Drain the eggs, return them to the pan and shake the pan to crack the shells all over.
                description: instructions steps for the recipe, ordered from step 1 (array[0]) to the last step (array[array.length -1]).
    FullRecipe:
      allOf:
        - $ref: "#/components/schemas/RecipePreview"
        - type: object
          properties:
            ingredients:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    example: carrot
                    description: Name of the ingredient.

                  amount:
                    type: integer
                    example: 3
                    description: The quantity of the ingredient.

                  unit:
                    type: string
                    example: large
                    description: The unit of the quantity for the ingredient.

                  description:
                    type: string
                    example: 3 large washed and chopped carrot.
                    description: a brief description of how to use the ingredient.

            instructions:
              type: array
              items:
                type: string
                example: Drain the eggs, return them to the pan and shake the pan to crack the shells all over.
                description: instructions steps for the recipe, ordered from step 1 (array[0]) to the last step (array[array.length -1]).

            numberOfPortions:
              type: integer
              description: Number of serving portions for the recipe.
              example: 4

            equipment:
              type: array
              items:
                type: string
                example: sauce pan
                description: array of all the required equipment for the recipe.
            summary:
              type: string
              example:
                Hazelnut Truffles is a hor doeuvre that serves 15. One portion of this dish contains around 2g of protein,
                6g of fat, and a total of 72 calories. For 32 cents per serving, this recipe covers 3% of your daily requirements of
                vitamins and minerals. It is a good option if youre following
                a gluten free and lacto ovo vegetarian diet.
              description: Brief summary of the recipe with some additional information on the recipe.
    Countries:
      type: array
      items:
        type: string
        example: Norway,Egypt
        description: List of country names.
    ErrorMessage:
      type: object
      properties:
        message:
          type: string
          example: error message
        error:
          type: boolean
          example: false

    SuccessMessage:
      type: object
      properties:
        message:
          type: string
          example: success message
        success:
          type: boolean
          example: true
    RecipePreparation:
      type: object
      required:
        - id
        - title
        - preparationSteps
      properties:
        id:
          type: integer
        title:
          type: string
        image:
          type: string
          format: uri
        numberOfPortions:
          type: integer
        preparationSteps:
          type: array
          items:
            type: object
            required:
              - stepNumber
              - instruction
              - equipment
              - ingredients
            properties:
              stepNumber:
                type: integer
              instruction:
                type: string
              equipment:
                type: array
                items:
                  type: string
              ingredients:
                type: array
                items:
                  type: object
                  required:
                    - name
                    - amount
                    - unit
                  properties:
                    name:
                      type: string
                    amount:
                      type: number
                    unit:
                      type: string
                    description:
                      type: string
      example:
        id: 101
        title: "Roasted Carrot Soup"
        image: "https://example.com/images/roasted-carrot-soup.jpg"
        numberOfPortions: 4
        preparationSteps:
          - stepNumber: 1
            instruction: "Preheat the oven to 200Â°C (400Â°F)."
            equipment:
              - "oven"
            ingredients: []
          - stepNumber: 2
            instruction: "Peel and chop carrots into 2cm pieces."
            equipment:
              - "knife"
              - "cutting board"
            ingredients:
              - name: "carrot"
                amount: 800
                unit: "g"
                description: "washed and peeled"
          - stepNumber: 3
            instruction: "Toss chopped carrots with olive oil, salt, and pepper; spread on a baking sheet."
            equipment:
              - "baking sheet"
            ingredients:
              - name: "olive oil"
                amount: 2
                unit: "tbsp"
                description: "extra virgin"
              - name: "salt"
                amount: 1
                unit: "tsp"
                description: "sea salt"
              - name: "black pepper"
                amount: 0.5
                unit: "tsp"
                description: "freshly ground"
          - stepNumber: 4
            instruction: "Roast carrots in the oven for 25 minutes until tender and caramelized."
            equipment:
              - "oven"
              - "baking sheet"
            ingredients: []
          - stepNumber: 5
            instruction: "Blend roasted carrots with vegetable stock until smooth; season to taste and serve hot."
            equipment:
              - "blender"
              - "saucepan"
            ingredients:
              - name: "vegetable stock"
                amount: 500
                unit: "ml"
                description: "warm"
